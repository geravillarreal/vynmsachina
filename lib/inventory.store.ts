import fs from 'fs';
import path from 'path';
import { InventoryData } from './inventory.types';

const DATA_PATH = process.env.INVENTORY_DATA_PATH
  ? path.join(process.cwd(), process.env.INVENTORY_DATA_PATH)
  : path.join(process.cwd(), 'lib', 'inventory.json');

const WRITE_TS = String(process.env.INVENTORY_WRITE_TS || '').toLowerCase() === 'true';

function ensureFile() {
  if (!fs.existsSync(DATA_PATH)) {
    const seed: InventoryData = { regions: [], cities: [], locations: [] };
    WRITE_TS ? writeTs(seed) : fs.writeFileSync(DATA_PATH, JSON.stringify(seed, null, 2), 'utf8');
  }
}

function writeTs(data: InventoryData) {
  const dir = path.dirname(DATA_PATH);
  if (!fs.existsSync(dir)) fs.mkdirSync(dir, { recursive: true });
  const content = `// Auto-generated by Admin UI. Do not edit by hand.\n` +
    `export default ${JSON.stringify(data, null, 2)} as const;\n`;
  fs.writeFileSync(DATA_PATH, content, 'utf8');
}

export function readInventory(): InventoryData {
  ensureFile();
  const raw = fs.readFileSync(DATA_PATH, 'utf8');
  if (WRITE_TS || DATA_PATH.endsWith('.ts')) {
    // Extrae el bloque JSON del archivo TS
    const start = raw.indexOf('{');
    const end = raw.lastIndexOf('}');
    const json = raw.slice(start, end + 1);
    return JSON.parse(json) as InventoryData;
  }
  return JSON.parse(raw) as InventoryData;
}

export function writeInventory(data: InventoryData) {
  if (WRITE_TS || DATA_PATH.endsWith('.ts')) return writeTs(data);
  fs.writeFileSync(DATA_PATH, JSON.stringify(data, null, 2), 'utf8');
}